const EventEmitter = require('events');
const _ = require('lodash/fp');

const log = require('../../utils/logger/logger')(module);
const stripeConfig = require('../../../config/stripe.config.json');
const stripe = process.env.NODE_ENV === 'production'
  ? require('stripe')(stripeConfig.apiLiveKeys.secretKey)
  : require('stripe')(stripeConfig.apiTestKeys.secretKey);

class StripeCreditCardController extends EventEmitter {
  constructor() {
    super();

    /**
     * @see https://stripe.com/docs/api#list_cards
     * @param user
     * @private
     */
    this._getAllUserCards = user => new Promise((resolve, reject) =>
      stripe.customers.listCards(user.stripe_account_id, (err, cards) => {
        if (err) return reject(err);
        return resolve(cards.data)
      })
    );

    /**
     * @see https://stripe.com/docs/api#delete_card
     * @param user
     * @private
     */
    this._deleteUserCard = user => card => new Promise((resolve, reject) =>
      stripe.customers.deleteCard(user.stripe_account_id, card.id, (err, confirmation) => {
        if (err) return reject(err);
        return resolve(confirmation)
      })
    );

    /**
     * Set source credit card to stripe user
     * @see https://stripe.com/docs/api#update_customer
     * @param user {Object} - user object, should ne { id: {string}}
     * @param stripeToken {String} - credit card token generated by Stripe.js
     */
    this.setStripeUserSourceCard = (user, stripeToken) => new Promise((resolve, reject) => {
      //use test card source in dev/test mode @see https://stripe.com/docs/testing#cards
      const source = process.env.NODE_ENV === 'production'
          ? stripeToken
          : stripeConfig.testCardToken;

      log.info('User ', user.email, ' with stripe account id ', user.stripe_account_id, ' trying to set credit card source ', source);
      stripe.customers.update(user.stripe_account_id, { source }, (err, customer) => {
        if (err) return reject(err);
        return resolve(customer);
      })
    });

    this.isUserHaveCards = user => this._getAllUserCards(user)
      .then(cards => Promise.resolve(!_.isEmpty(cards) ? { is_user_have_cards: true } : { is_user_have_cards: false }));

    this.deleteAllUserCards = user => this._getAllUserCards(user)
        .then(cards => Promise.all(cards.map(this._deleteUserCard(user))))
  }
}

module.exports = new StripeCreditCardController();
